%require "3.0"
%define api.pure full
%define api.token.prefix {TOK_}
%define parse.error verbose
%define parse.lac full

%code requires {
#include "ast.hxx"
#include <stdio.h>

using yyscan_t = void*;
}  // %code

%code provides {
int yylex_init(yyscan_t *yyscanner);
int yylex_destroy(yyscan_t yyscanner);
int yylex(YYSTYPE *yylval, yyscan_t yyscanner);
void *yyget_extra(yyscan_t yyscanner);
void  yyset_extra(void *user_defined, yyscan_t yyscanner);
void yyset_in(FILE *in, yyscan_t yyscanner);
void yyerror(yyscan_t yyscanner, igor::AST *ast, const char *msg);
}  // %code

%expect 0

%union {
  igor::AstConstant *constant;
  igor::AstFunction *function;
  string *name;
}

%param {yyscan_t yyscanner}
%parse-param {igor::AST *ast}

// Terminal symbols are in CAPS by convention.
%token <constant> CONSTANT
%token <name>     NAME
%token <name>     TYPE
%token            FN        // fn
%token            ARROW     // =>
%token            COLON     // :
%token            COMMA     // ,
%token            DOT       // .
%token            LB        // [
%token            RB        // ]
%token            LC        // {
%token            RC        // }
%token            LP        // (
%token            RP        // )
%token            WILDCARD  // _
%token            INVALID_CHAR

%type <function>  function
%type <name>      qualifier
%type <name>      qualified_type

%destructor { delete $$; } <*>

%start module

%%

module:
    %empty
  | function module

function:
    FN NAME arg_spec ret_spec body
{
  $$ = new igor::AstFunction;
  $$->move_name(*$2);
  if (!ast->add_function($$)) {
    YYABORT;
  }
  delete $2;
}

body:
    LC RC

arg_spec:
    LP RP
  | LP arg_list RP

arg:
    type_spec
  | NAME COLON type_spec
{
  delete $1;
}
  | NAME COMMA arg
{
  delete $1;
}

arg_list:
    arg
  | arg COMMA arg_list

ret_spec:
    %empty
  | COLON arg_list

qualifier:
    NAME DOT
{
  $$ = new string("/" + *$1 + "/");
  delete $1;
}
  | NAME DOT qualifier
{
  $$ = new string("/" + *$1 + *$3);
  delete $1;
  delete $3;
}

// Notation for array: Type[]. Suffix applied to the last shortest type.
// Notation for tuple: [Type1, Type2]
//
// Notation for function: T1 => T2 => RT
// This function takes two arguments of types T1 and T2 and return RT. Idea is
// taken from Haskell - uniform arg/return type. This notation is currying
// friendly.
//
// Use parenthesis to group:
//   T1 => (T2 => T3)[] => (T4 => T5)
// This function takes T1 and array of functions T2=>T3 and returns function
// T4=>T5.
//
// Generic instantiation uses parens: Templ(T1, T2).
type_spec:
    base_type
  | base_type ARROW type_spec

qualified_type:
    TYPE
{
  $$ = $1;
}
  | qualifier TYPE
{
  $$ = new string(*$1 + *$2);
  cout<<"qtype "<<*$$<<endl;
  delete $1;
  delete $2;
  cout<<"__1"<<endl;
}

base_type:
    qualified_type { cout<<"__2"<<endl; delete $1; cout<<"__3"<<endl; }
  | qualified_type LP type_list RP  // Generic instance
{
  cout<<"__4"<<endl;
  delete $1;
  cout<<"__5"<<endl;
}
  | LP type_spec RP
  | base_type LB RB  // Otherwise we get shit/reduce warning.
  | LB type_list RB

 type_list:
     type_spec
   | type_spec COMMA type_list

%%

void yyerror(yyscan_t yyscanner, igor::AST *ast, const char *msg) {
  string s;
  ast->error(s.append("Parse error: ").append(msg));
}
