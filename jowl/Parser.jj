options
{
    //BUILD_TOKEN_MANAGER = false;
    JDK_VERSION = "1.8";
    STATIC = false;
    SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
    //USER_CHAR_STREAM = true;
    LOOKAHEAD = 2;
}

PARSER_BEGIN(Parser)
package owl.lang;

import java.util.ArrayList;
import java.util.List;

public class Parser {
}

PARSER_END(Parser)

SKIP: { " " | "\r" | "\n" | "\t" }

TOKEN:
{
  <AS: "as">
| <FN: "fn">
| "." | "," | "_"
| ":" | ";"
| "(" | ")"
| "{" | "}"
| "[" | "]"
| "=>"
| <O: ["0"-"7"]>
| <D: ["0"-"9"]>
| <H: ["0"-"9", "a"-"f", "A"-"F"]>
| <NAME_FIRST: ["a"-"z"]>
| <META_FIRST: ["A"-"Z"]>
| <L: ["a"-"z", "A"-"Z", "0"-"9", "_"]>
| <NUM_DEC: (<D>)+>
| <NUM_HEX: "0x" (<H>)+>
| <NUM_OCT: "0o" (<D>)+>
| <NAME: (<NAME_FIRST>)(<L>)*>
| <META: (<META_FIRST>)(<L>)*>
}

AstModule module(): {
    AstModule module = new AstModule();
    AstFunction f;
}
{
    (
      f = function() { module.addFunction(f); }
    )*
    { return module; }
}

String prefix(): {
    String prefix = "";
    Token tok;
}
{
    (tok = <NAME> "." { prefix += tok.image + "."; })*
    { return prefix; }
}

String prefixName(): {
    String p, name;
    Token tok;
}
{
    p = prefix() tok = <NAME> { name = tok.image; }
    { return p + name; }
  | "_"
    { return "_"; }
}

String prefixType(): {
    String p, name;
    Token tok;
}
{
    p = prefix() tok = <META> { name = tok.image; }
    { return p + name; }
  | "_"
    { return "_"; }
}

AstFunction function(): {
    AstFunction function = new AstFunction();
}
{
    <FN> function.name = <NAME>.image
    (
        "(" (function.arguments = variableList())? ")"
    )?
    (":" function.returns = variableList())?
    function.block = block()
    { return function; }
}

List<AstVariable> variableList(): {
    List<AstVariable> argList = new ArrayList<AstVariable>();
    AstVariable a;
}
{
    a = variable() { argList.add(a); }
    (
        "," a = variable() { argList.add(a); }
    )*
    { return argList; }
}

AstVariable variable(): {
    AstVariable variable = new AstVariable();
    Token tok;
}
{
    tok = <NAME> { variable.name = tok.image; } (":" variable.type = type())?
    { return variable; }
  | variable.type = type()
    { return variable; }
}

AstBlock block(): {
}
{
    "{" "}"
    { return new AstBlock(); }
}

Type baseType(): {
    Type type = new Type();
}
{
    type.name = prefixType()
    // Generic instance:
  | type.name = prefixType() "(" ")"
  | type.name = prefixType() "[" "]" {
        Type arrayType = new Type();
        arrayType.name = "owl.Array";
        arrayType.params.add(type);
        type = arrayType;
    }
    { return type; }
}

Type type(): {
    Type type, t, functionType = null;
}
{
    type = baseType()
    (
        "=>" t = baseType() {
        if (functionType == null) {
            functionType = new Type();
            type.name = "owl.Function";
            type.params.add(type);
        }
        functionType.params.add(t);
        }
    )*
    { return functionType != null? functionType: type; }
}
