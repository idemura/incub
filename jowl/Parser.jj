options
{
  //BUILD_TOKEN_MANAGER = false;
  JDK_VERSION = "1.8";
  STATIC = false;
  SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
  //USER_CHAR_STREAM = true;
}

PARSER_BEGIN(Parser)
package owl.lang;

public class Parser {
  //
}
PARSER_END(Parser)

SKIP: { " " | "\r" | "\n" | "\t" }

TOKEN:
{
  "as"
| "fn"
| "." | "_"
| "(" | ")"
| "{" | "}"
| "[" | "]"
| <O: ["0"-"7"]>
| <D: ["0"-"9"]>
| <H: ["0"-"9", "a"-"f", "A"-"F"]>
| <NF: ["a"-"z"]>
| <TF: ["A"-"Z"]>
| <L: ["a"-"z", "A"-"Z", "0"-"9", "_"]>
| <NUM_DEC: (<D>)+>
| <NUM_HEX: "0x" (<H>)+>
| <NUM_OCT: "0o" (<D>)+>
| <NAME: (<NF>)(<L>)*>
}

AstModule module(): {
  AstModule astModule = new AstModule();
  AstFunction astFunction;
}
{
  (astFunction = function() {
      astModule.addFunction(astFunction);
    })*
  {
    return astModule;
  }
}

AstNode qualifiedName(): {
  Token tok;
  AstName astName;
}
{
    (tok = <NAME>) { astName = new AstName(tok.toString()); }
    ("." tok = <NAME> { astName.join(tok.toString()); })*
    {
      return astName;
    }
|   "_" { return AstName.WILDCARD; }
}

AstFunction function(): {
  Token tok;
}
{
  "fn" (tok = <NAME>) "(" ")" "{" "}" {
    return new AstFunction(tok.toString());
  }
}
